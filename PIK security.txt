<!DOCTYPE html><html lang="en"><head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Firebase Quickstart</title> <!-- Tailwind CSS for styling --> <script src="https://cdn.tailwindcss.com"></script> <style> body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; color: #1f2937; } .form-input { @apply w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150; } .task-item.completed h3, .task-item.completed p { text-decoration: line-through; color: #9ca3af; } .driver-item.selected { @apply bg-blue-100 border-blue-500 shadow-md; } </style></head><body class="flex items-start justify-center min-h-screen pt-10 pb-20"> <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-6xl mx-4 text-center border border-gray-200"> <!-- Title and description --> <h1 class="text-3xl font-bold mb-2">Firebase Quickstart</h1> <p class="text-gray-600 mb-6"> This app demonstrates anonymous user authentication and full CRUD operations on both private and public Firestore collections. </p> <!-- Auth and User Info Section --> <div id="auth-section" class="mb-6 space-y-4"> <button id="login-button" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300"> Login Anonymously </button> <div id="user-info" class="hidden text-left bg-gray-100 p-4 rounded-md"> <p class="text-gray-700"><strong>User ID:</strong> <span id="user-id" class="break-all font-mono text-sm"></span></p> <p class="mt-2 text-sm text-gray-500"> Your tasks are private, but your public tasks are visible to everyone. </p> </div> <button id="logout-button" class="hidden w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300"> Logout </button> </div> <!-- Main content: Private and Public Sections --> <div id="content-section" class="grid lg:grid-cols-2 xl:grid-cols-3 gap-8"> <!-- Private Data Section --> <div id="private-data-section" class="hidden"> <h2 class="text-2xl font-bold mb-4">Your Private Tasks</h2> <div class="mb-6"> <form id="private-task-form" class="space-y-4"> <input type="hidden" id="private-task-id"> <div> <input type="text" id="private-task-title" placeholder="Task Title" required class="form-input"> </div> <div> <textarea id="private-task-description" placeholder="Task Description" rows="3" class="form-input"></textarea> </div> <button type="submit" id="private-submit-button" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300"> Add Private Task </button> <button type="button" id="private-cancel-button" class="w-full bg-gray-400 hover:bg-gray-500 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300 hidden"> Cancel Edit </button> </form> </div> <div id="private-tasks-list" class="space-y-4 text-left"> <p class="text-gray-500 text-center">Login to see your private tasks.</p> </div> </div> <!-- Public Data Section --> <div id="public-data-section"> <h2 class="text-2xl font-bold mb-4">Public Tasks</h2> <div class="mb-6"> <form id="public-task-form" class="space-y-4"> <input type="hidden" id="public-task-id"> <div> <input type="text" id="public-task-title" placeholder="Task Title" required class="form-input"> </div> <div> <textarea id="public-task-description" placeholder="Task Description" rows="3" class="form-input"></textarea> </div> <button type="submit" id="public-submit-button" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300"> Add Public Task </button> <button type="button" id="public-cancel-button" class="w-full bg-gray-400 hover:bg-gray-500 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300 hidden"> Cancel Edit </button> </form> </div> <div id="public-tasks-list" class="space-y-4 text-left"> <p class="text-gray-500 text-center">Loading public tasks...</p> </div> </div> <!-- Drivers Data Section --> <div id="drivers-data-section" class="hidden"> <h2 class="text-2xl font-bold mb-4">Company Drivers</h2> <div class="mb-6"> <form id="drivers-form" class="space-y-4"> <div> <input type="text" id="driver-name" placeholder="Driver Name" required class="form-input"> </div> <div> <input type="text" id="driver-license" placeholder="License Number" required class="form-input"> </div> <button type="submit" id="add-driver-button" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300"> Add Driver </button> </form> </div> <div id="drivers-list" class="space-y-4 text-left"> <p class="text-gray-500 text-center">Login to see the list of drivers.</p> </div> </div> <!-- Driver Paperwork Section (Initially hidden) --> <div id="paperwork-section" class="hidden col-span-2 xl:col-span-3"> <h2 class="text-2xl font-bold mb-4"><span id="paperwork-driver-name"></span> Paperwork</h2> <div class="mb-6"> <form id="paperwork-form" class="space-y-4"> <input type="hidden" id="paperwork-id"> <div> <input type="text" id="paperwork-title" placeholder="Document Title (e.g., Q3 Invoice)" required class="form-input"> </div> <div> <input type="text" id="paperwork-type" placeholder="Document Type (e.g., Invoice, Contract)" required class="form-input"> </div> <button type="submit" id="paperwork-submit-button" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300"> Add Paperwork </button> <button type="button" id="paperwork-cancel-button" class="w-full bg-gray-400 hover:bg-gray-500 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300 hidden"> Cancel Edit </button> </form> </div> <div id="paperwork-list" class="space-y-4 text-left"> <p class="text-gray-500 text-center">Click a driver to view their paperwork.</p> </div> </div> </div> <!-- Message/Error Section --> <div id="message-container" class="mt-6 hidden"> <p id="message-text" class="text-sm font-medium text-center"></p> </div> </div> <script type="module"> // Import Firebase SDKs import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js"; import { getAuth, signInAnonymously, signOut, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js"; import { getFirestore, doc, collection, onSnapshot, addDoc, updateDoc, deleteDoc, query } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js"; // Global variables provided by the environment const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {}; const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null; let app, db, auth, userId = null; let unsubscribePrivateTasks, unsubscribePublicTasks, unsubscribeDrivers, unsubscribePaperwork; let editingPrivateTaskId = null; let editingPublicTaskId = null; let editingPaperworkId = null; let selectedDriverId = null; // UI elements const loginBtn = document.getElementById('login-button'); const logoutBtn = document.getElementById('logout-button'); const userInfo = document.getElementById('user-info'); const userIdSpan = document.getElementById('user-id'); const privateDataSection = document.getElementById('private-data-section'); const privateTasksList = document.getElementById('private-tasks-list'); const publicTasksList = document.getElementById('public-tasks-list'); const driversDataSection = document.getElementById('drivers-data-section'); const driversList = document.getElementById('drivers-list'); const paperworkSection = document.getElementById('paperwork-section'); const paperworkDriverName = document.getElementById('paperwork-driver-name'); const paperworkList = document.getElementById('paperwork-list'); const messageContainer = document.getElementById('message-container'); const messageText = document.getElementById('message-text'); const privateTaskForm = document.getElementById('private-task-form'); const privateTaskIdInput = document.getElementById('private-task-id'); const privateTaskTitleInput = document.getElementById('private-task-title'); const privateTaskDescriptionInput = document.getElementById('private-task-description'); const privateSubmitButton = document.getElementById('private-submit-button'); const privateCancelButton = document.getElementById('private-cancel-button'); const publicTaskForm = document.getElementById('public-task-form'); const publicTaskIdInput = document.getElementById('public-task-id'); const publicTaskTitleInput = document.getElementById('public-task-title'); const publicTaskDescriptionInput = document.getElementById('public-task-description'); const publicSubmitButton = document.getElementById('public-submit-button'); const publicCancelButton = document.getElementById('public-cancel-button'); const driversForm = document.getElementById('drivers-form'); const driverNameInput = document.getElementById('driver-name'); const driverLicenseInput = document.getElementById('driver-license'); const paperworkForm = document.getElementById('paperwork-form'); const paperworkIdInput = document.getElementById('paperwork-id'); const paperworkTitleInput = document.getElementById('paperwork-title'); const paperworkTypeInput = document.getElementById('paperwork-type'); const paperworkSubmitButton = document.getElementById('paperwork-submit-button'); const paperworkCancelButton = document.getElementById('paperwork-cancel-button'); // Function to show a message function showMessage(text, isError = false) { messageText.textContent = text; messageContainer.classList.remove('hidden'); if (isError) { messageText.classList.remove('text-green-600'); messageText.classList.add('text-red-600'); } else { messageText.classList.remove('text-red-600'); messageText.classList.add('text-green-600'); } } // Initialize Firebase try { app = initializeApp(firebaseConfig); db = getFirestore(app); auth = getAuth(app); showMessage("Firebase initialized.", false); } catch (error) { showMessage(`Error initializing Firebase: ${error.message}`, true); } // Function to render a single task item function renderTaskItem(doc, isPublic = false) { const task = doc.data(); const taskId = doc.id; const item = document.createElement('div'); item.className = `task-item bg-gray-100 p-4 rounded-md flex justify-between items-center transition duration-150 ease-in-out hover:shadow-md ${task.completed ? 'completed' : ''}`; const isOwner = userId && task.userId === userId; const actionButtons = isOwner ? ` <button class="edit-btn bg-yellow-500 hover:bg-yellow-600 text-white text-xs font-bold py-1 px-2 rounded-md">Edit</button> <button class="delete-btn bg-red-600 hover:bg-red-700 text-white text-xs font-bold py-1 px-2 rounded-md">Delete</button> ` : `<span class="text-sm text-gray-500">Created by: ${task.userId.substring(0, 8)}...</span>`; item.innerHTML = ` <div class="flex-1 min-w-0"> <h3 class="text-lg font-semibold truncate">${task.title}</h3> <p class="text-sm text-gray-600 mt-1 break-words">${task.description}</p> </div> <div class="flex space-x-2 ml-4"> ${actionButtons} </div> `; // Add click listener to toggle completion status item.addEventListener('click', async (e) => { if (isOwner && e.target.tagName !== 'BUTTON') { const docRef = isPublic ? doc(db, `artifacts/${appId}/public/data/public_tasks/${taskId}`) : doc(db, `artifacts/${appId}/users/${userId}/tasks/${taskId}`); try { await updateDoc(docRef, { completed: !task.completed }); showMessage("Task status updated!", false); } catch (error) { showMessage(`Error updating task status: ${error.message}`, true); } } }); if (isOwner) { item.querySelector('.edit-btn').addEventListener('click', () => { const titleInput = isPublic ? publicTaskTitleInput : privateTaskTitleInput; const descriptionInput = isPublic ? publicTaskDescriptionInput : privateTaskDescriptionInput; const submitBtn = isPublic ? publicSubmitButton : privateSubmitButton; const cancelBtn = isPublic ? publicCancelButton : privateCancelButton; if (isPublic) { editingPublicTaskId = taskId; } else { editingPrivateTaskId = taskId; } titleInput.value = task.title; descriptionInput.value = task.description; submitBtn.textContent = 'Update Task'; cancelBtn.classList.remove('hidden'); }); item.querySelector('.delete-btn').addEventListener('click', async () => { const docRef = isPublic ? doc(db, `artifacts/${appId}/public/data/public_tasks/${taskId}`) : doc(db, `artifacts/${appId}/users/${userId}/tasks/${taskId}`); try { await deleteDoc(docRef); showMessage("Task deleted successfully!", false); } catch (error) { showMessage(`Error deleting task: ${error.message}`, true); } }); } return item; } // Function to render a single driver item function renderDriverItem(doc) { const driver = doc.data(); const driverId = doc.id; const item = document.createElement('div'); item.className = `driver-item bg-gray-100 p-4 rounded-md text-left cursor-pointer border-2 border-transparent transition duration-200 ease-in-out hover:shadow-md`; if (selectedDriverId === driverId) { item.classList.add('selected'); } item.innerHTML = ` <h3 class="text-lg font-semibold">${driver.name}</h3> <p class="text-sm text-gray-600 mt-1">License: ${driver.licenseNumber}</p> <p class="text-xs text-gray-500 mt-2">Added by: ${driver.userId.substring(0, 8)}...</p> `; item.addEventListener('click', () => { // Remove selected class from all drivers document.querySelectorAll('.driver-item').forEach(el => el.classList.remove('selected')); item.classList.add('selected'); selectedDriverId = driverId; paperworkDriverName.textContent = driver.name + "'s"; paperworkSection.classList.remove('hidden'); setupPaperworkListener(driverId); }); return item; } // Function to render a single paperwork item function renderPaperworkItem(doc) { const paperwork = doc.data(); const paperworkId = doc.id; const item = document.createElement('div'); item.className = `bg-gray-100 p-4 rounded-md flex justify-between items-center`; const isOwner = userId && paperwork.userId === userId; const actionButtons = isOwner ? ` <button class="edit-btn bg-yellow-500 hover:bg-yellow-600 text-white text-xs font-bold py-1 px-2 rounded-md">Edit</button> <button class="delete-btn bg-red-600 hover:bg-red-700 text-white text-xs font-bold py-1 px-2 rounded-md">Delete</button> ` : `<span class="text-sm text-gray-500">Created by: ${paperwork.userId.substring(0, 8)}...</span>`; item.innerHTML = ` <div class="flex-1 min-w-0"> <h3 class="text-lg font-semibold truncate">${paperwork.title}</h3> <p class="text-sm text-gray-600 mt-1">Type: ${paperwork.type}</p> </div> <div class="flex space-x-2 ml-4"> ${actionButtons} </div> `; if (isOwner) { item.querySelector('.edit-btn').addEventListener('click', () => { editingPaperworkId = paperworkId; paperworkTitleInput.value = paperwork.title; paperworkTypeInput.value = paperwork.type; paperworkSubmitButton.textContent = 'Update Paperwork'; paperworkCancelButton.classList.remove('hidden'); }); item.querySelector('.delete-btn').addEventListener('click', async () => { const docRef = doc(db, `artifacts/${appId}/public/data/drivers/${selectedDriverId}/paperwork/${paperworkId}`); try { await deleteDoc(docRef); showMessage("Paperwork deleted successfully!", false); } catch (error) { showMessage(`Error deleting paperwork: ${error.message}`, true); } }); } return item; } // Function to set up the real-time data listener for the private tasks collection function setupPrivateDataListener(uid) { if (unsubscribePrivateTasks) { unsubscribePrivateTasks(); } const collectionPath = `artifacts/${appId}/users/${uid}/tasks`; const q = query(collection(db, collectionPath)); unsubscribePrivateTasks = onSnapshot(q, (querySnapshot) => { privateTasksList.innerHTML = ''; if (querySnapshot.empty) { privateTasksList.innerHTML = '<p class="text-gray-500 text-center">No private tasks yet. Add one above!</p>'; } else { querySnapshot.forEach(doc => { privateTasksList.appendChild(renderTaskItem(doc, false)); }); showMessage("Private tasks updated in real-time!", false); } }, (error) => { showMessage(`Error getting private data: ${error.message}`, true); }); } // Function to set up the real-time data listener for the public tasks collection function setupPublicDataListener() { if (unsubscribePublicTasks) { unsubscribePublicTasks(); } const collectionPath = `artifacts/${appId}/public/data/public_tasks`; const q = query(collection(db, collectionPath)); unsubscribePublicTasks = onSnapshot(q, (querySnapshot) => { publicTasksList.innerHTML = ''; if (querySnapshot.empty) { publicTasksList.innerHTML = '<p class="text-gray-500 text-center">No public tasks yet. Add one above!</p>'; } else { querySnapshot.forEach(doc => { publicTasksList.appendChild(renderTaskItem(doc, true)); }); showMessage("Public tasks updated in real-time!", false); } }, (error) => { showMessage(`Error getting public data: ${error.message}`, true); }); } // Function to set up the real-time data listener for the drivers collection function setupDriversListener() { if (unsubscribeDrivers) { unsubscribeDrivers(); } const collectionPath = `artifacts/${appId}/public/data/drivers`; const q = query(collection(db, collectionPath)); unsubscribeDrivers = onSnapshot(q, (querySnapshot) => { driversList.innerHTML = ''; if (querySnapshot.empty) { driversList.innerHTML = '<p class="text-gray-500 text-center">No drivers found. Add one above!</p>'; } else { querySnapshot.forEach(doc => { driversList.appendChild(renderDriverItem(doc)); }); showMessage("Drivers list updated in real-time!", false); } }, (error) => { showMessage(`Error getting drivers data: ${error.message}`, true); }); } // Function to set up the real-time listener for a driver's paperwork function setupPaperworkListener(driverId) { if (unsubscribePaperwork) { unsubscribePaperwork(); } const collectionPath = `artifacts/${appId}/public/data/drivers/${driverId}/paperwork`; const q = query(collection(db, collectionPath)); unsubscribePaperwork = onSnapshot(q, (querySnapshot) => { paperworkList.innerHTML = ''; if (querySnapshot.empty) { paperworkList.innerHTML = '<p class="text-gray-500 text-center">No paperwork found for this driver. Add one above!</p>'; } else { querySnapshot.forEach(doc => { paperworkList.appendChild(renderPaperworkItem(doc)); }); showMessage("Paperwork updated in real-time!", false); } }, (error) => { showMessage(`Error getting paperwork data: ${error.message}`, true); }); } // Handle private form submission (Add or Update) privateTaskForm.addEventListener('submit', async (e) => { e.preventDefault(); const title = privateTaskTitleInput.value.trim(); const description = privateTaskDescriptionInput.value.trim(); if (!userId) { showMessage("You must be logged in to manage private tasks.", true); return; } if (!title) { showMessage("Task title cannot be empty.", true); return; } try { if (editingPrivateTaskId) { const docRef = doc(db, `artifacts/${appId}/users/${userId}/tasks/${editingPrivateTaskId}`); await updateDoc(docRef, { title: title, description: description, updatedAt: new Date().toISOString() }); showMessage("Private task updated successfully!", false); } else { const collectionRef = collection(db, `artifacts/${appId}/users/${userId}/tasks`); await addDoc(collectionRef, { userId: userId, title: title, description: description, completed: false, createdAt: new Date().toISOString() }); showMessage("New private task added successfully!", false); } privateTaskForm.reset(); editingPrivateTaskId = null; privateSubmitButton.textContent = 'Add Private Task'; privateCancelButton.classList.add('hidden'); } catch (error) { showMessage(`Error saving private task: ${error.message}`, true); } }); // Handle private cancel button privateCancelButton.addEventListener('click', () => { privateTaskForm.reset(); editingPrivateTaskId = null; privateSubmitButton.textContent = 'Add Private Task'; privateCancelButton.classList.add('hidden'); }); // Handle public form submission (Add or Update) publicTaskForm.addEventListener('submit', async (e) => { e.preventDefault(); const title = publicTaskTitleInput.value.trim(); const description = publicTaskDescriptionInput.value.trim(); if (!title) { showMessage("Task title cannot be empty.", true); return; } try { if (editingPublicTaskId) { const docRef = doc(db, `artifacts/${appId}/public/data/public_tasks/${editingPublicTaskId}`); await updateDoc(docRef, { title: title, description: description, updatedAt: new Date().toISOString() }); showMessage("Public task updated successfully!", false); } else { const collectionRef = collection(db, `artifacts/${appId}/public/data/public_tasks`); await addDoc(collectionRef, { userId: userId || 'anonymous', title: title, description: description, completed: false, createdAt: new Date().toISOString() }); showMessage("New public task added successfully!", false); } publicTaskForm.reset(); editingPublicTaskId = null; publicSubmitButton.textContent = 'Add Public Task'; publicCancelButton.classList.add('hidden'); } catch (error) { showMessage(`Error saving public task: ${error.message}`, true); } }); // Handle public cancel button publicCancelButton.addEventListener('click', () => { publicTaskForm.reset(); editingPublicTaskId = null; publicSubmitButton.textContent = 'Add Public Task'; publicCancelButton.classList.add('hidden'); }); // Handle drivers form submission (Add only) driversForm.addEventListener('submit', async (e) => { e.preventDefault(); const driverName = driverNameInput.value.trim(); const driverLicense = driverLicenseInput.value.trim(); if (!userId) { showMessage("You must be logged in to add a driver.", true); return; } if (!driverName || !driverLicense) { showMessage("Driver name and license cannot be empty.", true); return; } try { const collectionRef = collection(db, `artifacts/${appId}/public/data/drivers`); await addDoc(collectionRef, { userId: userId, name: driverName, licenseNumber: driverLicense, createdAt: new Date().toISOString() }); showMessage("New driver added successfully!", false); driversForm.reset(); } catch (error) { showMessage(`Error saving driver: ${error.message}`, true); } }); // Handle paperwork form submission (Add or Update) paperworkForm.addEventListener('submit', async (e) => { e.preventDefault(); const title = paperworkTitleInput.value.trim(); const type = paperworkTypeInput.value.trim(); if (!userId) { showMessage("You must be logged in to manage paperwork.", true); return; } if (!selectedDriverId) { showMessage("Please select a driver first.", true); return; } if (!title || !type) { showMessage("Paperwork title and type cannot be empty.", true); return; } try { if (editingPaperworkId) { const docRef = doc(db, `artifacts/${appId}/public/data/drivers/${selectedDriverId}/paperwork/${editingPaperworkId}`); await updateDoc(docRef, { title: title, type: type, updatedAt: new Date().toISOString() }); showMessage("Paperwork updated successfully!", false); } else { const collectionRef = collection(db, `artifacts/${appId}/public/data/drivers/${selectedDriverId}/paperwork`); await addDoc(collectionRef, { userId: userId, title: title, type: type, createdAt: new Date().toISOString() }); showMessage("New paperwork added successfully!", false); } paperworkForm.reset(); editingPaperworkId = null; paperworkSubmitButton.textContent = 'Add Paperwork'; paperworkCancelButton.classList.add('hidden'); } catch (error) { showMessage(`Error saving paperwork: ${error.message}`, true); } }); // Handle paperwork cancel button paperworkCancelButton.addEventListener('click', () => { paperworkForm.reset(); editingPaperworkId = null; paperworkSubmitButton.textContent = 'Add Paperwork'; paperworkCancelButton.classList.add('hidden'); }); // Listen for authentication state changes onAuthStateChanged(auth, async (user) => { if (user) { userId = user.uid; loginBtn.classList.add('hidden'); logoutBtn.classList.remove('hidden'); userInfo.classList.remove('hidden'); privateDataSection.classList.remove('hidden'); driversDataSection.classList.remove('hidden'); userIdSpan.textContent = userId; setupPrivateDataListener(userId); setupDriversListener(); } else { userId = null; loginBtn.classList.remove('hidden'); logoutBtn.classList.add('hidden'); userInfo.classList.add('hidden'); privateDataSection.classList.add('hidden'); driversDataSection.classList.add('hidden'); paperworkSection.classList.add('hidden'); selectedDriverId = null; // Unsubscribe from all listeners if (unsubscribePrivateTasks) { unsubscribePrivateTasks(); } if (unsubscribeDrivers) { unsubscribeDrivers(); } if (unsubscribePaperwork) { unsubscribePaperwork(); } } }); // Handle anonymous login async function handleLogin() { try { if (initialAuthToken) { await signInWithCustomToken(auth, initialAuthToken); } else { await signInAnonymously(auth); } } catch (error) { showMessage(`Login Error: ${error.message}`, true); } } // Handle logout async function handleLogout() { try { await signOut(auth); } catch (error) { showMessage(`Logout Error: ${error.message}`, true); } } // Attach event listeners loginBtn.addEventListener('click', handleLogin); logoutBtn.addEventListener('click', handleLogout); // Set up public data listener on page load, since it's accessible to all setupPublicDataListener(); </script></body></html>